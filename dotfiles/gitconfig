[user]
	email = 16364986+data-pup@users.noreply.github.com
	name = data-pup
[core]
	editor = nvim
	excludesfile = ~/.gitignore_global
	# Trying a new pager for now...
	# pager = diff-so-fancy | less --tabs=4 -RFX
	pager = delta --theme="fairyfloss" --minus-color="#8c5e7e" --plus-color="#5b8565"
[diff]
	tool = vimdiff
[difftool]
	prompt = false
	trustExitCode = true
[mergetool]
	trustExitCode = true
[merge]
	conflictstyle = diff3
[rebase]
	stat = true
	autoSquash = true
	missingCommitsCheck = error
[color]
	ui = true
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = 11
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[alias]
	# Fetch changes from the upstream remote.
	fpu = !git fetch -p upstream

	# Fetch changes from the upstream remote.
	fpo = !git fetch -p origin

	# Open a new vim instance with a fugitive window open.
	gfg = !vim -c "G"
	fugitive-status = !vim -c "G"

	# Open a new vim instance showing the git log, using fugitive.
	fugitive-log = !vim -c "Glog"

	# List files which have changed since REVIEW_BASE.
	# (REVIEW_BASE defaults to 'master')
	files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")

	# Show the commit history in graph form for the current branch.
	log-graph = !git log --graph --decorate --pretty=oneline

	# Show the commit history in graph form for the current branch.
	log-graph-branches = !git log --graph --decorate --pretty=oneline --branches

	# Show stats for commits unique to this branch since the merge base, with stats.
	log-stat = !git log --decorate --pretty=oneline --stat $REVIEW_BASE..HEAD

	# Show stats for commits unique to this branch since the merge base, without stats.
	log-branch = !git log --decorate --pretty=oneline $REVIEW_BASE..HEAD

	# Interatively rebase the commits on this branch since the merge base.
	rebase-branch = !git rebase --interactive $(git merge-base HEAD \"$REVIEW_BASE\")

	# Open all files changed since REVIEW_BASE in Vim tabs
	# Then, run fugitive's :Gdiff in each tab, and finally
	# tell vim-gitgutter to show +/- for changes since REVIEW_BASE
	# NOTE: This uses vertical diff splits
	review-vdiff = !vim -p $(git files) +\"tabdo Gvdiffsplit $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

	# Open all files changed since REVIEW_BASE in Vim tabs
	# Then, run fugitive's :Gdiff in each tab, and finally
	# tell vim-gitgutter to show +/- for changes since REVIEW_BASE
	# NOTE: This uses horizontal diff splits
	review-diff = !vim -p $(git files) +\"tabdo Gdiffsplit $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

	# Same as the above, except specify names of files as arguments,
	# instead of opening all files:
	# git reviewone foo.js bar.js
	# NOTE: This uses vertical diff splits
	review-one-vdiff = !vim -p +\"tabdo Gvdiffsplit $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

	# Same as the above, except specify names of files as arguments,
	# instead of opening all files:
	# git reviewone foo.js bar.js
	# NOTE: This uses horizontal diff splits
	review-one-diff = !vim -p +\"tabdo Gdiffsplit $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

	# Submodule aliases for checking status and updating.
	sms = submodule status --recursive
	smu = submodule update --init --recursive

	# Same as `files`, but with a diff stat instead of just names.
	stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")

	# Watch unstaged changes.
	watch-diff = !watch --color -n 5 git diff --color=always --stat

	# Watch staged changes.
	watch-diff-cached = !watch --color -n 5 git diff --color=always --stat --cached

	# Watch git log.
	watch-log = !watch --color -n 20 git log --oneline --decorate --graph --color=always

	# Watch git status.
	watch-status = !watch -n 10 --color git -c color.status=always status --short
