# # # ZSH Configuration Settings:
# --------------------------------------------------------------------------- #

# Use vim keybindings.
bindkey -v

# Return to command mode with 'jj' or 'lkj'
bindkey -M viins 'jj' vi-cmd-mode
bindkey -M viins 'lkj' vi-cmd-mode

# This will undo the last action in command mode.
bindkey -M vicmd 'u' undo

# push-line will send you to a new prompt, and
# restore the current prompt after completing that command.
bindkey -M vicmd "q" push-line


# History Configuration Settings:
# -------------------------------
HISTFILE=${HOME}/.zsh_history     # The location of the history file.
SAVEHIST=1000                     # The # number of events in the history file.
HISTSIZE=1000                     # The max # of events stored internally.

# Automatically call cd if you enter a directory name.
setopt AUTO_CD

# 10 second delay before calling rm, if the term involves a * regex.
setopt RM_STAR_WAIT

# My personal prompt (add a lil' sparkle sparkle)
export PS1='___________________________________________
%F{white}[prev_return:%?][curr_event:%h][curr_priv:%#]
 %F{magenta}%B░▒▓█%F{blue}%B%n@%m%b%F{magenta}%B█▓▒░%F{magenta}%B
%F{blue}%B[%y]:%F{pink}%B%D{%a %b %d} %D{%I:%M:%S%P}
%U%F{magenta}%~/%b%k%f %F{pink}%}%u
✨  '

# Editor alias
# ------------
alias vim='nvim'

# Git Aliases:
# ------------
alias gs='git status'
alias gits='git status'
alias gitss='git status --short'
alias gitsv='git status -vv'
alias gitsvl='git status -vv | less'
alias gitdc='git diff --cached'
alias gitbv='git branch -vv'

# Watch Aliases
# -------------
alias watchgs='watch -n 10 --color git -c color.status=always status --short'


# # # Personal Aliases (WIP)
# --------------------------

# # # # # Overwrite protections # # # # #
# These aliases will send confirmation messages
# to the user before an overwrite occurs. In my Zsh profile,
# these also include nocorrect, so that these are not corrected.
# XXX: Type these commands carefully!
# NOTE: This can potentially interfere with some
# shell script functionality if run as source.
alias mv='nocorrect mv -iv'
alias cp='nocorrect cp -iv'
alias ln="ln -i"
alias rm='nocorrect rm -iv'
alias mkdir='nocorrect mkdir'
alias man='nocorrect man'

alias my_less='less -m -N -g -i -J --line-numbers --underline-special'

# Clear screen alias.
alias cls='clear'

# Use 'exa' as an 'ls' replacement
alias ls="exa"

# # # ls aliases
alias lsa="ls -a"
alias lsl="ls -l"
alias ls1="ls -1"

# # # # # Process status aliases # # # # #

# These commands will print the processes using the most memory.
# NOTE: These also can limit output to 10 and 25 results.
alias psmem="ps afx | sort -nr -k 4"
alias psmem10="ps afx | sort -nr -k 4 | head -n 10"
alias psmem25="ps afx | sort -nr -k 4 | head -n 25"

## get top process eating cpu ##
# These commands will print the processes using the most CPU.
# NOTE: These also can limit output to 10 and 25 results.
alias pscpu="ps afx | sort -nr -k 3"
alias pscpu10="ps afx | sort -nr -k 3 | head -n 10"
alias pscpu25="ps afx | sort -nr -k 3 | head -n 25"

# # Ensure that arrow keys work as they should
bindkey '\e[A' up-line-or-history
bindkey '\e[B' down-line-or-history
bindkey '\eOA' up-line-or-history
bindkey '\eOB' down-line-or-history
bindkey '\e[C' forward-char
bindkey '\e[D' backward-char
bindkey '\eOC' forward-char
bindkey '\eOD' backward-char

# # # Read Markdown files
md() { pandoc "$1" | lynx -stdin; }

# # # fuzzy find
source /usr/share/doc/fzf/examples/key-bindings.zsh
export FZF_CTRL_T_COMMAND='rg --files --hidden'

# clean this up a little later we're having fun

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

bind-git-helper() {
  local c
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^g^$c' fzf-g$c-widget"
  done
}

bind-git-helper f b t r h
unset -f bind-git-helper

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
